cmake_minimum_required(VERSION 3.5)
project(ibow-lcd)

if(UNIX AND NOT APPLE)
 set(LINUX TRUE)
endif()

# Recognising different systems
if(LINUX) 
  message(STATUS ">>> Linux Os")
  add_compile_definitions(USE_LINUX=true)
# linux stuff here
elseif(APPLE)
 message(STATUS ">>> Mac OS")
 add_compile_definitions(USE_MAC=true)
# stuff that should happen not on Linux 
endif()

if(CMAKE_BUILD_TYPE MATCHES Release)
  message(STATUS "Setting Release options")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -O3 -march=native")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O3 -march=native")
elseif(CMAKE_BUILD_TYPE MATCHES Debug)
  message(STATUS "Setting Debug options")
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -O1 -pg -march=native")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -O1 -pg -march=native")
endif()

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

find_package(OpenCV REQUIRED) # openCV

find_package(OpenMP REQUIRED) # OpenMP
if (OPENMP_FOUND)
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()


# headers
include_directories(
${PROJECT_SOURCE_DIR}/include
${PROJECT_SOURCE_DIR}/external
)

# cpps
set(SOURCE_FILES  ${PROJECT_SOURCE_DIR}/lib/src/binary_descriptor.cc
                  ${PROJECT_SOURCE_DIR}/lib/src/binary_index.cc
                  ${PROJECT_SOURCE_DIR}/lib/src/binary_tree_node.cc
                  ${PROJECT_SOURCE_DIR}/lib/src/binary_tree.cc
                  # tests
                  # ${PROJECT_SOURCE_DIR}/lib/tests/test_search.cc
                  ${PROJECT_SOURCE_DIR}/lib/tests/test_bindex.cc
)

set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
add_executable(obindex2 ${SOURCE_FILES})
target_compile_features(obindex2 PRIVATE cxx_std_17)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
target_link_libraries(obindex2 
${OpenCV_LIBS}
# ${PCL_LIBRARIES}
# ${CERES_LIBRARIES}
)